/* File generated with Shader Minifier 1.1.3.r.1
 * http://www.ctrl-alt-test.fr
 */
#ifndef SHADER_CODE_INTRO_H_
#define SHADER_CODE_INTRO_H_

const char* const txt_vert =
 "#version 330\n"
 "uniform mat4 mvm,pm;"
 "uniform mat3 nm;"
 "uniform vec3 offset;"
 "uniform float txtAmount,time;"
 "layout(location=0)in vec4 position;"
 "layout(location=1)in vec3 normal;"
 "layout(location=2)in float distance;"
 "out vec3 viewspacePosition3,viewspaceNormal;"
 "out vec4 viewspacePosition4;"
 "mat3 rotz(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);"
 "}"
 "mat3 rotx(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);"
 "}"
 "mat3 roty(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);"
 "}"
 "void main()"
 "{"
   "vec4 pos=position;"
   "pos.xyz*=rotx(.6-txtAmount);"
   "pos.xyz*=rotz(1.-txtAmount);"
   "pos.xyz*=roty(1.-txtAmount);"
   "float rv=abs(-1.+mod(time*.5,2.))-.5;"
   "pos.xyz*=rotz(rv);"
   "pos.xyz*=txtAmount;"
   "pos.xyz+=offset;"
   "viewspacePosition4=pos;"
   "viewspacePosition3=viewspacePosition4.xyz;"
   "viewspaceNormal=normalize(vec3(normal));"
   "gl_Position=pm*pos;"
 "}";

const char* const txt_frag =
 "#version 330\n"
 "uniform sampler2D t;"
 "uniform vec3 lig;"
 "in vec3 viewspacePosition3,viewspaceNormal;"
 "in vec4 viewspacePosition4;"
 "vec4 lambertian(vec4 ambientColor,vec4 diffuseColor,vec4 specularColor,float diffuseFactor,float specularFactor,float specularPow,vec3 pos,vec3 eyePos,vec3 lightPos,vec3 normal)"
 "{"
   "vec4 color=ambientColor;"
   "vec3 N=normalize(normal),L=normalize(lightPos-pos);"
   "float lambertTerm=dot(N,L);"
   "if(lambertTerm>0.)"
     "{"
       "color+=diffuseColor*lambertTerm*diffuseFactor;"
       "vec3 E=normalize(eyePos-pos),R=reflect(-L,N);"
       "float specularTerm=pow(max(dot(R,E),0.),specularPow);"
       "color+=specularColor*specularTerm*specularFactor;"
     "}"
   "return color;"
 "}"
 "void main()"
 "{"
   "vec3 lt=vec3(3.,0.,90.);"
   "gl_FragColor=lambertian(vec4(.2,.2,.2,1.),vec4(.1,.1,.1,1.),vec4(1.,1.,1.,1.),.5,1.3,8.,viewspacePosition3,vec3(0),vec4(lt,1.).xyz,viewspaceNormal);"
 "}";

const char* const tv_vs_glsl =
 "varying vec2 pos;"
 "void main()"
 "{"
   "pos=-((gl_Vertex-1.)*.5);"
   "gl_Position=gl_Vertex;"
 "}";

const char* const tv_fs_glsl =
 "uniform sampler2D input0;"
 "uniform vec2 viewportSize;"
 "varying vec2 pos;"
 "uniform float fTime,fFlashAmount,fReflectionSize,fDeformValue,fScreenSize1,fScreenSize2,fScreenSize3;"
 "const float PI=3.14159;"
 "float lens=PI/fDeformValue,screenWidth=viewportSize.x,screenHeight=viewportSize.y;"
 "vec2 zoom(in vec2 p,in float radius)"
 "{"
   "float zoom=1.5-(radius*cos(p.x*PI/lens)+radius*cos(p.y*PI/lens));"
   "return vec2(p.x*zoom-.5,p.y*zoom-.5);"
 "}"
 "vec3 deform(in sampler2D tex,in vec2 p)"
 "{"
   "return p.x<-1.||p.x>0.||p.y<-1.||p.y>0.?vec3(0.,0.,0.):texture2D(tex,p).xyz;"
 "}"
 "float rand(in vec2 p)"
 "{"
   "return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5);"
 "}"
 "void main()"
 "{"
   "vec2 p=vec2(0.,0.);"
   "p.x=1.-pos.x*2.;"
   "p.y=1.-pos.y*2.;"
   "vec2 q=pos,z=zoom(p,fScreenSize1),z1=zoom(p,fScreenSize2),z2=zoom(p,fScreenSize3);"
   "float g=(2.-cos(PI/lens/2.+z.x*PI/lens)-cos(PI/lens/2.+z.y*PI/lens))*32.,rnd1=rand(vec2(p.x+fTime,p.y-fTime)),rnd2=rand(vec2(p.x-fTime,p.y+fTime)),d=rnd1*2./float(screenWidth);"
   "vec3 source=deform(input0,z),glass1=deform(input0,z1),glass2=deform(input0,z2);"
   "float v=fReflectionSize*g;"
   "vec3 noise;"
   "noise.x=deform(input0,vec2(z.x-d-v,z.y-d)).x;"
   "noise.y=deform(input0,vec2(z.x,z.y)).y;"
   "noise.z=deform(input0,vec2(z.x-d+v,z.y-d)).z;"
   "vec3 color=source+glass1*glass1+glass2*.1+noise*.15;"
   "color+=fFlashAmount;"
   "color-=(vec3(rnd1,rnd1,rnd1)-vec3(rnd2,rnd2,rnd2))*.125;"
   "color*=.75+.25*sin(z.x*float(screenWidth)*10.2);"
   "color*=.9+.1*cos(z.y*float(screenHeight)*10.2)*sin(.5+z.x*float(screenWidth)*10.2);"
   "color*=.975+.025*sin(fTime*77.7*cos(fTime*191.1));"
   "gl_FragColor=vec4(color,1.);"
   "return;"
 "}";

const char* const terrainTest_vert =
 "varying vec3 cameraPosition,viewDirection;"
 "varying mat4 pmat,mview,mviewproj;"
 "void main()"
 "{"
   "gl_Position=gl_Vertex;"
   "vec4 v=gl_Vertex;"
   "v=gl_ProjectionMatrixInverse*v;"
   "v/=v.w;"
   "v=gl_ModelViewMatrixInverse*v;"
   "vec4 nearPlanePosition=v/v.w;"
   "mview=gl_ModelViewMatrix;"
   "mviewproj=gl_ModelViewProjectionMatrix;"
   "pmat=gl_ProjectionMatrix;"
   "cameraPosition=(gl_ModelViewMatrixInverse*vec4(0.,0.,0.,1.)).xyz;"
   "viewDirection=normalize(nearPlanePosition-cameraPosition).xyz;"
 "}";

const char* const terrainTest_frag =
 "varying vec2 uv;"
 "uniform float time;"
 "uniform sampler2D iChannel0,iChannel1,iChannel2,mask;"
 "varying mat4 mview;"
 "varying float znear,zfar,nearPlane,farPlane;"
 "varying mat4 pmat;"
 "uniform vec3 sky1,sky2,lig,cube,objectPos;"
 "uniform float objectMix;"
 "varying vec3 cameraPosition;"
 "varying float nearPlanePosition;"
 "varying vec3 viewDirection;"
 "varying mat4 mviewproj;\n"
 "#define pi2 6.28318530718\n"
 "const float precis=.015;"
 "uniform vec2 g_resolution;struct hitInfo{int materialId;};"
 "float hash(float n)"
 "{"
   "return fract(sin(n)*43758.5);"
 "}"
 "float noise(in vec3 x)"
 "{"
   "vec3 p=floor(x),f=fract(x);"
   "float a=texture2D(iChannel0,x.xy/256.+p.z*120.712).x,b=texture2D(iChannel0,x.xy/256.+(p.z+1.)*120.712).x;"
   "return mix(a,b,f.z);"
 "}"
 "const mat3 m=mat3(0.,.8,.6,-.8,.36,-.48,-.6,-.48,.64);"
 "float noise(in vec2 x)"
 "{"
   "vec2 p=floor(x),f=fract(x),uv=p.xy+f.xy*f.xy*(3.-2.*f.xy);"
   "return-1.+2.*texture2D(iChannel0,(uv+.5)/256.,-100.).x;"
 "}"
 "vec3 texturize(sampler2D sa,vec3 p,vec3 n)"
 "{"
   "vec3 x=texture2D(sa,p.yz).xyz,y=texture2D(sa,p.zx).xyz,z=texture2D(sa,p.xy).xyz;"
   "return x*abs(n.x)+y*abs(n.y)+z*abs(n.z);"
 "}"
 "float fbm(vec3 p)"
 "{"
   "float f;"
   "f=.5*noise(p);"
   "p=m*p*2.02;"
   "f+=.25*noise(p);"
   "p=m*p*2.03;"
   "f+=.125*noise(p);"
   "p=m*p*2.01;"
   "f+=.0625*noise(p);"
   "return f;"
 "}"
 "mat3 rotz(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);"
 "}"
 "mat3 rotx(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);"
 "}"
 "mat3 roty(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);"
 "}"
 "vec2 opUnion(vec2 d1,vec2 d2)"
 "{"
   "return d1.x<d2.x?d1:d2;"
 "}"
 "float opSub(float d1,float d2)"
 "{"
   "return max(-d2,d1);"
 "}"
 "vec3 opRep(vec3 p,vec3 c)"
 "{"
   "return mod(p,c)-.5*c;"
 "}"
 "float length2(vec2 p)"
 "{"
   "return sqrt(p.x*p.x+p.y*p.y);"
 "}"
 "float length6(vec2 p)"
 "{"
   "p=p*p*p;"
   "p=p*p;"
   "return pow(p.x+p.y,1./6.);"
 "}"
 "float length8(vec2 p)"
 "{"
   "p=p*p;"
   "p=p*p;"
   "p=p*p;"
   "return pow(p.x+p.y,.125);"
 "}"
 "float sdTorus82(vec3 p,vec2 t)"
 "{"
   "vec2 q=vec2(length2(p.xz)-t.x,p.y);"
   "return length8(q)-t.y;"
 "}"
 "float sdCylinder(vec3 p,vec2 h)"
 "{"
   "return max(length(p.xz)-h.x,abs(p.y)-h.y);"
 "}"
 "float udRoundBox(vec3 pos,vec3 size,float r)"
 "{"
   "return length(max(abs(pos)-size,0.))-r;"
 "}"
 "float sdBox(vec3 p,vec3 b)"
 "{"
   "vec3 d=abs(p)-b;"
   "return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));"
 "}"
 "float sdCone(vec3 p,vec2 c)"
 "{"
   "float q=length(p.xz);"
   "return max(dot(c,vec2(q,p.y)),p.y);"
 "}"
 "float sdSphere(in vec3 p,in vec4 e)"
 "{"
   "vec3 di=p-e.xyz;"
   "return length(di)-e.w;"
 "}"
 "vec3 opTwist(vec3 p)"
 "{"
   "float c=cos(10.*p.y+10.),s=sin(10.*p.y+10.);"
   "mat2 m=mat2(c,-s,s,c);"
   "return vec3(m*p.xz,p.y);"
 "}"
 "vec2 sdSegment(vec3 a,vec3 b,vec3 p)"
 "{"
   "vec3 pa=p-a,ba=b-a;"
   "float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);"
   "return vec2(length(pa-ba*h),h);"
 "}"
 "float smin(float a,float b)"
 "{"
   "float k=.06,h=clamp(.5+.5*(b-a)/k,0.,1.);"
   "return mix(b,a,h)-k*h*(1.-h);"
 "}"
 "float smin(float a,float b,float k)"
 "{"
   "float h=clamp(.5+.5*(b-a)/k,0.,1.);"
   "return mix(b,a,h)-k*h*(1.-h);"
 "}"
 "vec2 smin(vec2 a,vec2 b)"
 "{"
   "float k=1.6,h=clamp(.5+.5*(b.x-a.x)/k,0.,1.);"
   "return mix(b,a,h)-k*h*(1.-h);"
 "}"
 "float sdCylinder6(vec3 p,vec2 h)"
 "{"
   "return max(length6(p.xz)-h.x,abs(p.y)-h.y);"
 "}"
 "float sdCapsule(vec3 p,vec3 a,vec3 b,float r)"
 "{"
   "vec3 pa=p-a,ba=b-a;"
   "float h=clamp(dot(pa,ba)/dot(ba,ba),0.,1.);"
   "return length(pa-ba*h)-r;"
 "}\n"
 "#define MAT_NONE 0.0\n"
 "#define MAT_DBF 1.0\n"
 "#define MAT_GROUND 2.0\n"
 "#define MAT_TREE 3.0\n"
 "#define MAT_SNOW 4.0\n"
 "#define MAT_HAT 5.0\n"
 "#define MAT_EYE 6.0\n"
 "#define MAT_BODY 7.0\n"
 "#define MAT_NOSE 8.0\n"
 "#define MAT_ARM 9.0\n"
 "#define MAT_D 10.0\n"
 "#define MAT_B 11.0\n"
 "#define MAT_F 12.0\n"
 "float terrain(vec2 x)"
 "{"
   "vec2 z=x*.05;"
   "x*=.06;"
   "x+=227.3;"
   "vec2 p=floor(x),f=fract(x);"
   "f=f*f*(3.-2.*f);"
   "float a=texture2D(iChannel0,(p+vec2(.5,.5))/256.,-32.).x,b=texture2D(iChannel0,(p+vec2(1.5,.5))/256.,-32.).x,c=texture2D(iChannel0,(p+vec2(.5,1.5))/256.,-32.).x,d=texture2D(iChannel0,(p+vec2(1.5,1.5))/256.,-32.).x,height=mix(mix(a,b,f.x),mix(c,d,f.x),f.y);"
   "height-=.04*noise((5.+.1*time)*z)+.1*time;"
   "height-=sin(z).x+.1*time;"
   "height+=sin(z).y+.1*time;"
   "height-=sin(z*.3).x;"
   "height+=sin(z*.5).y;"
   "height=height*5.;"
   "float zp=opRep(vec3(z,0.),vec3(1.,1.,1.)),ss=smoothstep(.5,2.2,abs(z.y));"
   "height=mix(height,height-5.,ss);"
   "float cc=1.-smoothstep(.1,1.,abs(z.x));"
   "cc*=smoothstep(.5,1.,abs(sin(z.y)));"
   "height=mix(height,height-5.,cc);"
   "return height-.2;"
 "}"
 "vec2 distToDbf(in vec3 pos)"
 "{"
   "float materialId=MAT_SNOW;"
   "mat3 rot=rotx(pi2*.25);"
   "pos.y-=40.;"
   "float d=sdTorus82(rot*pos,vec2(10.,3.2));"
   "d=min(d,udRoundBox(pos+vec3(-10.,-12.,0.),vec3(2.2,12.,2.2),1.));"
   "pos.x-=28.;"
   "float b=sdTorus82(pos*rot,vec2(10.,3.2));"
   "b=min(b,udRoundBox(pos+vec3(10.,-12.,0.),vec3(2.2,12.,2.2),1.));"
   "pos.x-=28.;"
   "float f=udRoundBox(pos+vec3(10.,1.,0.),vec3(2.2,10.,2.2),1.);"
   "pos+=vec3(0.,-9.,0.);"
   "f=min(f,sdTorus82(rot*pos,vec2(10.,3.2)));"
   "f=opSub(f,sdBox(pos+vec3(-4.8,10.,1.),vec3(12.,10.,5.)));"
   "f=opSub(f,sdBox(pos+vec3(-14.8,-8.,1.),vec3(12.,10.,5.)));"
   "f=min(f,udRoundBox(pos+vec3(5.,7.5,0.),vec3(2.2,2.2,2.2),1.));"
   "float dist=min(min(f,d),b);"
   "vec2 ret=vec2(dist,materialId);"
   "return ret;"
 "}"
 "float trees(vec3 p,float h)"
 "{"
   "float e=smoothstep(.4,.6,texture2D(iChannel1,.001*p.xz,-32.).x);"
   "e*=smoothstep(23.,24.,abs(p.z-3.));"
   "vec2 c=floor(p.xz/4.);"
   "p.xz=mod(p.xz,4.)-2.;"
   "p.xz+=3.*(-1.+2.*texture2D(iChannel2,c/256.,-32.).xy);"
   "float r=sdCone(p-vec3(0.,h+6.*e,0.),vec2(.9397,.342));"
   "return r;"
 "}"
 "float crags(vec3 p,float h)"
 "{"
   "float e=smoothstep(.1,.9,texture2D(iChannel0,.0002*p.xz,-32.).x);"
   "h+=e*2.;"
   "return p.y-h;"
 "}"
 "vec2 distToSnowman(in vec3 pos,in vec3 offset)"
 "{"
   "mat3 m;"
   "float materialId=MAT_BODY;"
   "vec3 posNose=pos;"
   "mat3 rot=rotz(pi2*.5);"
   "rot*=rotx(pi2*.75);"
   "float distort=fbm(pos.xxz+offset)*.2,dist=sdSphere(pos-vec3(0.,20.,0.)+vec3(distort)+vec3(offset),vec4(20.)),head=sdSphere(pos-vec3(10.,55.,10.)+vec3(distort)+vec3(offset),vec4(10.));"
   "dist=smin(dist,head,2.);"
   "float hat=sdTorus82((pos-vec3(20.,75.,20.)+distort+vec3(offset))*rotx(0.),vec2(4.,4.));"
   "hat=smin(hat,sdTorus82((pos-vec3(20.,73.,20.)+distort+offset)*rotx(0.),vec2(10.,1.)),2.);"
   "if(hat<dist)"
     "materialId=MAT_HAT;"
   "dist=smin(dist,hat,2.);"
   "float nose=sdSphere(pos-vec3(18.,65.,28.)+vec3(distort)+vec3(offset),vec4(2.));"
   "if(nose<dist)"
     "materialId=MAT_NOSE;"
   "dist=smin(dist,nose,2.);"
   "float eyes=sdSphere(pos-vec3(15.,68.,27.)+vec3(distort)+vec3(offset),vec4(1.));"
   "eyes=min(eyes,sdSphere(pos-vec3(22.,68.,27.)+distort+offset,vec4(1.)));"
   "if(eyes<dist)"
     "materialId=MAT_EYE;"
   "dist=smin(dist,eyes,.2);"
   "float buttons=sdSphere(pos-vec3(18.,45.,36.5)+distort+offset,vec4(1.5));"
   "buttons=min(sdSphere(pos-vec3(18.4,40.,37.)+distort+offset,vec4(1.5)),buttons);"
   "buttons=min(sdSphere(pos-vec3(18.,35.,37.5)+distort+offset,vec4(1.5)),buttons);"
   "buttons=min(sdSphere(pos-vec3(19.1,50.,33.5)+distort+offset,vec4(1.5)),buttons);"
   "buttons=min(sdSphere(pos-vec3(18.7,54.,31.)+distort+offset,vec4(1.5)),buttons);"
   "if(buttons<dist)"
     "materialId=MAT_EYE;"
   "dist=smin(dist,buttons,.5);"
   "float mouth=10000.;"
   "mouth=min(sdSphere(pos-vec3(14.,63.,27.5)+distort+offset,vec4(.5)),mouth);"
   "mouth=min(sdSphere(pos-vec3(16.,62.,28.5)+distort+offset,vec4(.5)),mouth);"
   "mouth=min(sdSphere(pos-vec3(18.,61.,28.5)+distort+offset,vec4(.5)),mouth);"
   "mouth=min(sdSphere(pos-vec3(20.,61.,28.5)+distort+offset,vec4(.5)),mouth);"
   "mouth=min(sdSphere(pos-vec3(22.,62.,28.5)+distort+offset,vec4(.5)),mouth);"
   "mouth=min(sdSphere(pos-vec3(24.,63.,28.)+distort+offset,vec4(.5)),mouth);"
   "if(mouth<dist)"
     "materialId=MAT_EYE;"
   "dist=smin(dist,mouth,.2);"
   "vec2 ret=vec2(dist,materialId);"
   "return ret;"
 "}"
 "vec2 map(in vec3 p,in bool masked)"
 "{"
   "vec2 res=vec2(1000.,-1.);"
   "float h=terrain(p.xz),dd=p.y-h;"
   "res=vec2(dd,0.);"
   "float dis=100000.,crag=crags(p,h);"
   "res.x=min(dis,res.x);"
   "res.y=MAT_SNOW;"
   "if(masked)"
     "{"
       "\n#ifdef LOGO\n"
       "vec2 distDbf=distToDbf(p+vec3(objectPos.x,objectPos.y,objectPos.z));"
       "if(distDbf.x<res.x)"
         "{"
           "res.y=distDbf.y;"
         "}"
       "res.x=smin(distDbf.x,res.x,objectMix);"
       "\n#endif\n"
       "\n#ifdef SNOWMAN\n"
       "vec2 distSnowman=distToSnowman(p,vec3(objectPos.x,objectPos.y,objectPos.z));"
       "if(distSnowman.x<res.x)"
         "{"
           "res.y=distSnowman.y;"
         "}"
       "res.x=smin(distSnowman.x,res.x,objectMix);"
       "\n#endif\n"
     "}"
   "return res;"
 "}"
 "vec3 intersect(in vec3 ro,in vec3 rd,in bool masked)"
 "{"
   "float maxd=500.,dist=precis*1.5,t=0.,d=0.,m=1.;"
   "for(int steps=0;steps<150;steps++)"
     "{"
       "if(abs(dist)<precis||t>maxd)"
         "continue;"
       "t+=dist;"
       "vec2 res=map(ro+rd*t,masked);"
       "dist=res.x;"
       "d=res.y;"
       "m=res.y;"
     "}"
   "if(t>maxd)"
     "m=-1.;"
   "return vec3(t,d,m);"
 "}"
 "vec3 calcNormal(in vec3 pos,in float prec,in bool masked)"
 "{"
   "vec3 eps=vec3(prec,0.,0.);"
   "return normalize(vec3(map(pos+eps.xyy,masked).x-map(pos-eps.xyy,masked).x,map(pos+eps.yxy,masked).x-map(pos-eps.yxy,masked).x,map(pos+eps.yyx,masked).x-map(pos-eps.yyx,masked).x));"
 "}"
 "vec3 calcNormal(in vec3 pos,in bool masked)"
 "{"
   "vec3 eps=vec3(precis,0.,0.);"
   "return normalize(vec3(map(pos+eps.xyy,masked).x-map(pos-eps.xyy,masked).x,map(pos+eps.yxy,masked).x-map(pos-eps.yxy,masked).x,map(pos+eps.yyx,masked).x-map(pos-eps.yyx,masked).x));"
 "}"
 "float softshadow(in vec3 ro,in vec3 rd,in float k,in bool masked)"
 "{"
   "float res=1.,t=0.,h=1.;"
   "for(int i=0;i<60;i++)"
     "{"
       "h=map(ro+rd*t,masked).x;"
       "res=min(res,k*h/t);"
       "t+=clamp(h,.02,1.);"
     "}"
   "return clamp(res,0.,1.);"
 "}"
 "float calcOcc(in vec3 pos,in vec3 nor,in bool masked)"
 "{"
   "float totao=0.;"
   "for(int aoi=0;aoi<8;aoi++)"
     "{"
       "float hr=.1+1.5*pow(float(aoi)/8.,2.);"
       "vec3 aopos=pos+nor*hr;"
       "float dd=map(aopos,masked).x;"
       "totao+=max(0.,hr-3.*dd-.01);"
     "}"
   "return clamp(1.-.15*totao,0.,1.);"
 "}"
 "vec3 background(vec3 p,vec3 d)"
 "{"
   "vec3 color=mix(sky1,sky2,d.y*.5+.5);"
   "return color*(noise(d)+.3*pow(noise(d*4.),2.));"
 "}"
 "void shade(in vec3 pos,in vec3 nor,in vec3 rd,in float matID,out vec3 bnor,out vec4 mate,out vec2 mate2)"
 "{"
   "bnor=vec3(0.);"
   "mate=vec4(0.);"
   "mate2=vec2(0.);"
   "vec3 snowTint=vec3(1.,1.,1.);"
   "if(matID==MAT_D)"
     "{"
       "snowTint=vec3(1.,1.,0.);"
     "}"
   "else"
     " if(matID==MAT_B)"
       "{"
         "snowTint=vec3(0.,1.,0.);"
       "}"
     "else"
       " if(matID==MAT_F)"
         "{"
           "snowTint=vec3(1.,0.,0.);"
         "}"
   "if(matID==MAT_HAT)"
     "{"
       "mate.xyz=vec3(.2,.3,.2);"
       "float iss=smoothstep(.2,.5,nor.y);"
       "vec3 snowColor=vec3(.65,.8,.8),cnor=normalize(-1.+2.*texture2D(iChannel0,.65*pos.xz).xyz);"
       "cnor.y=abs(cnor.y);"
       "float spe=max(0.,pow(clamp(dot(lig,reflect(rd,cnor)),0.,1.),16.));"
       "mate2.y=spe*iss;"
       "mate.xyz=mix(mate.xyz,snowColor,iss);"
     "}"
   "else"
     " if(matID==MAT_NOSE)"
       "{"
         "mate.xyz=vec3(.2,.175,.2);"
         "float iss=smoothstep(.2,.9,nor.y);"
         "iss=mix(iss,.2,.75*smoothstep(.9,1.,texturize(iChannel1,.1*pos,nor).x));"
         "vec3 snowColor=vec3(.65,.8,.8),cnor=normalize(-1.+2.*texture2D(iChannel0,.65*pos.xz).xyz);"
         "cnor.y=abs(cnor.y);"
         "float spe=max(0.,pow(clamp(dot(lig,reflect(rd,cnor)),0.,1.),16.));"
         "mate.y=spe*iss;"
         "mate.xyz=mix(mate.xyz,snowColor,iss);"
       "}"
     "else"
       " if(matID==MAT_EYE)"
         "{"
           "mate.xyz=vec3(.1,.1,.1);"
           "float iss=smoothstep(.2,.9,nor.y);"
           "vec3 snowColor=vec3(.65,.8,.8),cnor=normalize(-1.+2.*texture2D(iChannel0,.65*pos.xz).xyz);"
           "cnor.y=abs(cnor.y);"
           "float spe=max(0.,pow(clamp(dot(lig,reflect(rd,cnor)),0.,1.),16.));"
           "mate.y=spe*iss;"
           "mate.xyz=mix(mate.xyz,snowColor,iss*.5);"
         "}"
       "else"
         " if(matID==MAT_ARM)"
           "{"
             "mate.xyz=vec3(.4,.25,.2);"
             "float iss=smoothstep(.2,.5,nor.y);"
             "vec3 snowColor=vec3(.65,.8,.8),cnor=normalize(-1.+2.*texture2D(iChannel0,.65*pos.xz).xyz);"
             "cnor.y=abs(cnor.y);"
             "float spe=max(0.,pow(clamp(dot(lig,reflect(rd,cnor)),0.,1.),16.));"
             "mate.y=spe*iss;"
             "mate.xyz=mix(mate.xyz,snowColor,iss*.5);"
           "}"
         "else"
           "{"
             "mate.xyz=vec3(.1,.1,.1);"
             "float iss=smoothstep(.2,.5,nor.y);"
             "mate.xyz=vec3(.8,.8,.8)*snowTint;"
             "vec3 cnor=normalize(-1.+2.*texture2D(iChannel0,.65*pos.xz).xyz);"
             "cnor.y=abs(cnor.y);"
             "float spe=max(0.,pow(clamp(dot(lig,reflect(rd,cnor)),0.,1.),16.));"
             "mate.xyz=spe*iss;"
             "mate.xyz=mix(mate.xyz,vec3(.8),iss);"
             "mate.xyz+=sky1*cnor.y*1;"
             "mate.xyz+=sky2*cnor.y*1;"
           "}"
 "}"
 "float cloudShadow(in vec3 pos)"
 "{"
   "vec2 cuv=pos.xz+lig.xz*(100.-pos.y)/lig.y;"
   "float cc=.1+.9*smoothstep(.1,.35,texture2D(iChannel1,.0001*cuv+.1+.013*time).x);"
   "return cc;"
 "}"
 "vec3 snow(vec3 ro,vec3 rd)"
 "{"
   "return vec3(1.,1.,1.);"
 "}"
 "void main()"
 "{"
   "vec2 iMouse=vec2(0.,0.),fp=gl_FragCoord.xy/g_resolution.xy;"
   "bool masked=texture2D(mask,fp).x>.001;"
   "vec2 xy=-1.+2.*fp,s=xy*vec2(1.75,1.);"
   "float time=time*.15+2.*iMouse.x/g_resolution.x;"
   "vec3 ro=cameraPosition,rd=normalize(viewDirection);"
   "float ctime=time;"
   "vec3 tmat=intersect(ro,rd,masked),d=vec3(xy,1.),col=2.5*background(ro+tmat.x*rd,d)-rd.y*1.5;"
   "float sun=clamp(dot(rd,lig),0.,1.);"
   "vec3 bgcol=col;"
   "float depth=1.;"
   "if(tmat.z>-.5)"
     "{"
       "vec3 pos=ro+tmat.x*rd,nor=tmat.z==MAT_SNOW?calcNormal(pos,masked):calcNormal(pos,masked);"
       "vec4 mate=vec4(0.);"
       "vec2 mate2=vec2(0.);"
       "vec3 bnor=vec3(0.);"
       "shade(pos,nor,rd,tmat.z,bnor,mate,mate2);"
       "nor=normalize(nor+bnor);"
       "vec3 ref=reflect(rd,nor);"
       "float occ=calcOcc(pos,nor,masked)*clamp(.7+.3*nor.y,0.,1.),sky=.6+.4*nor.y,bou=clamp(-nor.y,0.,1.),dif=max(dot(nor,lig),0.),bac=max(.2+.8*dot(nor,normalize(vec3(-lig.x,0.,-lig.z))),0.),sha=0.;"
       "if(dif>.01)"
         "sha=softshadow(pos+.01*nor,lig,64.,masked);"
       "sha*=cloudShadow(pos);"
       "float fre=pow(clamp(1.+dot(nor,rd),0.,1.),3.);"
       "vec3 lin=vec3(0.);"
       "lin+=dif*vec3(1.7,1.15,.7)*pow(vec3(sha),vec3(1.,1.2,2.));"
       "lin+=sky*vec3(.25,.2,.25)*occ;"
       "lin+=1.2*bou*vec3(.15,.2,.2)*(.5+.5*occ);"
       "lin+=fre*vec3(1.,1.25,1.3)*occ*.5*(.5+.5*dif*sha);"
       "lin+=mate2.y*vec3(1.,.6,.5)*4.*occ*dif*(.1+.9*sha);"
       "col=mate.xyz*lin;"
       "col=mix(bgcol,col,exp(-.0015*pow(tmat.x,1.)));"
       "vec4 worldHitPos=mviewproj*vec4(pos,1.);"
       "float zc=worldHitPos.z,wc=worldHitPos.w;"
       "depth=zc/wc;"
       "depth=(depth+1.)/2.;"
     "}"
   "col+=vec3(1.,.6,.2)*.4*pow(sun,4.);"
   "col=pow(clamp(col,0.,1.),vec3(.45));"
   "gl_FragDepth=depth;"
   "gl_FragColor=vec4(vec3(col),1.);"
 "}";

const char* const particles_vert =
 "#version 330\n"
 "layout(location=0)in vec4 position;"
 "layout(location=1)in vec2 index;"
 "void main()"
 "{"
   "gl_Position=position;"
 "}";

const char* const particles_geom =
 "#version 330\n"
 "float rand(vec2 co)"
 "{"
   "return fract(sin(dot(co.xy,vec2(12.9898,78.233)))*43758.5);"
 "}"
 "float randGaussian(vec2 co)"
 "{"
   "float r1=rand(co+vec2(71.3,56.4)),r2=rand(co+vec2(32.9,28.5));"
   "return.03+sqrt(-2.*log(r1*.999+.001))*cos(6.28319*r2);"
 "}"
 "vec3 gauss3(vec2 p,float seed)"
 "{"
   "return vec3(randGaussian(p+vec2(19.412+seed*.981,11.183+seed*1.5677)),randGaussian(p+vec2(86.287+seed*4.6671,87.242+seed*8.6112)),randGaussian(p+vec2(37.563+seed*3.367,23.543+seed*5.729)));"
 "}\n"
 "#define pi2 6.28318530718\n"
 "layout(points)in;layout(triangle_strip,max_vertices=4)out;"
 "out vec2 quadCoord;"
 "out float quadSize;"
 "uniform mat4 modelViewMatrix,projectionMatrix;"
 "uniform float fTime;"
 "uniform vec3 eye,rot;"
 "mat3 rotz(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);"
 "}"
 "mat3 rotx(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);"
 "}"
 "mat3 roty(in float a)"
 "{"
   "float ca=cos(a),sa=sin(a);"
   "return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);"
 "}\n"
 "#define DEG_PER_RAD 0.0174532925\n"
 "void main()"
 "{"
   "vec3 o=vec3(.05,0.,-.05)*.5;"
   "vec4 p=gl_in[0].gl_Position;"
   "vec3 r=vec3(rand(p.xy+vec2(23.098,47.863)),rand(p.xy+vec2(98.672,38.942)),rand(p.xy+vec2(86.573,24.182)));"
   "vec4 downVec=vec4(0.,1.,-.75,1.);"
   "downVec.xyz+=r*p.xyz;"
   "p.xyz=r;"
   "mat3 rotMat=rotx(pi2*(rot.x/360.));"
   "rotMat*=roty(pi2*(rot.y/360.));"
   "rotMat*=rotz(pi2*(rot.z/360.));"
   "p.xyz+=eye*.001;"
   "p.xyz-=(fTime+100.)*.05*downVec.xyz;"
   "p.xyz=mod(p.xyz,1.);"
   "p.xyz-=.5;"
   "p.xyz*=16.;"
   "p.xyz*=rotMat;"
   "p.w=1.;"
   "float size=.4;"
   "o*=size;"
   "if(size>.1)"
     "{"
       "quadSize=o.x*50.;"
       "gl_Position=projectionMatrix*(p+o.xzyy);"
       "quadCoord=vec2(1.,-1.);"
       "EmitVertex();"
       "gl_Position=projectionMatrix*(p+o.xxyy);"
       "quadCoord=vec2(1.,1.);"
       "EmitVertex();"
       "gl_Position=projectionMatrix*(p+o.zzyy);"
       "quadCoord=vec2(-1.,-1.);"
       "EmitVertex();"
       "gl_Position=projectionMatrix*(p+o.zxyy);"
       "quadCoord=vec2(-1.,1.);"
       "EmitVertex();"
     "}"
 "}";

const char* const particles_frag =
 "#version 330\n"
 "in vec2 quadCoord;"
 "in float quadSize;"
 "uniform vec2 viewportSize;"
 "uniform float aspectRatio;"
 "void main()"
 "{"
   "float hres=(viewportSize.y-viewportSize.y/aspectRatio)*.5;"
   "if(gl_FragCoord.y<hres||gl_FragCoord.y>viewportSize.y-hres)"
     "{"
       "discard;"
     "}"
   "float centerd=length(quadCoord),clampd=max(centerd-.2,0.),alphaFade=exp(-clampd*clampd*4.);"
   "if(alphaFade<.001)"
     "discard;"
   "gl_FragData[0]=vec4(1.);"
   "gl_FragData[0]=vec4(vec3(1.),alphaFade*2.*quadSize);"
 "}";

const char* const blit_vert =
 "void main()"
 "{"
   "gl_Position=gl_Vertex;"
 "}";

const char* const blit_frag =
 "uniform sampler2D t;"
 "void main()"
 "{"
   "vec2 p=gl_FragCoord.xy/vec2(800.,600.);"
   "gl_FragColor=vec4(texture2D(t,p).xyz,1.);"
 "}";

#endif // SHADER_CODE_INTRO_H_
